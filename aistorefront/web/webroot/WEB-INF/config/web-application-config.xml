<?xml version="1.0" encoding="UTF-8"?>
<!--
 [y] hybris Platform

 Copyright (c) 2017 SAP SE or an SAP affiliate company.  All rights reserved.

 This software is the confidential and proprietary information of SAP
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with SAP.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
		
	<context:annotation-config/> 

	<!--
		Tenant
	-->
	<bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
		<property name="scopes">
			<map>
				<entry key="tenant" value="de.hybris.platform.spring.TenantScope"/>
			</map>
		</property>
	</bean>
	
	
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxTotal" value="${redis.pool.maxTotal}"/>  
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>  
        <property name="minIdle" value="${redis.pool.minIdle}"/>  
        <property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}"/>  
        <property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}"/>  
        <property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}"/>  
        <property name="testWhileIdle" value="${redis.pool.testWhileIdle}"/>  
    </bean>  
    
    <bean id="singleNodeJedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">  
        <property name="poolConfig" ref="jedisPoolConfig"/>  
        <property name="hostName" value="${redis.instance.host}"/>  
        <property name="port" value="${redis.instance.port}"/>  
        <!-- <property name="password" value="${redis.pass}"/> -->
        <property name="timeout" value="${redis.instance.timeout}"/>  
        <property name="usePool" value="${redis.instance.usePool}" />  
    </bean>
    
    <bean id="multiNodeJedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy" lazy-init="true" autowire-candidate="false">
		<constructor-arg index="0">
			<bean class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
				<constructor-arg index="0" value="${redis.instance.master}" />
				<constructor-arg index="1">
					<set>
						<value>${redis.instance.sentinel.node1}</value>
						<value>${redis.instance.sentinel.node2}</value> 
						<value>${redis.instance.sentinel.node3}</value>
					</set>
				</constructor-arg>
			</bean>
		</constructor-arg>
     	<constructor-arg index="1" ref="jedisPoolConfig"/>
    	<!-- <property name="password" value="${redis.pass}"/> -->
     	<property name="timeout" value="${redis.instance.pool.timeout}"/>
	</bean>


    <bean id="accentureRedisSerializer" class="com.acn.ai.storefront.serialize.AccentureJdkSerializationRedisSerializer"/>
	
 	<bean id="redisTemplate1" class="org.springframework.data.redis.core.RedisTemplate">
	    <property name="connectionFactory" ref="${redis.instance.jedisFactory}" />
	    <property name="keySerializer">
	    <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
	    </property>
	    <property name="valueSerializer" ref="accentureRedisSerializer" />
	    <property name="hashKeySerializer">
	    <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	    </property>
	    <property name="hashValueSerializer" ref="accentureRedisSerializer" />
	</bean>
	
	<bean id="sessionRepository"
		class="org.springframework.session.data.redis.RedisOperationsSessionRepository">
	    <constructor-arg ref="redisTemplate1" />
	    <property name="defaultMaxInactiveInterval" value="${libyb2bstorefront.session.timeout}" />
	</bean>
	
	
	<bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
		<property name="maxInactiveIntervalInSeconds" value="${libyb2bstorefront.session.timeout}" />
	</bean>
	
	
	
	
	<!-- Load additional configuration -->
	<import resource="spring-filter-config.xml"/>
	<import resource="spring-security-config.xml"/>
	<import resource="spring-mvc-config.xml"/>
	<import resource="classpath:/acceleratorcms/spring/web-spring-context.xml"/>
	<import resource="spring-cms-config.xml"/>
	<import resource="multi-step-checkout-config.xml"/>
	<import resource="classpath*:/accelerator/additional-web-spring-context.xml"/>

</beans>
